diff --git a/CMakeLists.txt b/CMakeLists.txt
index 625ebb334..3603cc881 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -11,18 +11,26 @@ if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
 endif()
 
 if(DEFINED ENV{SLIC3R_STATIC})
-	set(SLIC3R_STATIC_INITIAL $ENV{SLIC3R_STATIC})
+    set(SLIC3R_STATIC_INITIAL $ENV{SLIC3R_STATIC})
 else()
-	if (MSVC OR MINGW OR APPLE)
-		set(SLIC3R_STATIC_INITIAL 1)
-	else()
-		set(SLIC3R_STATIC_INITIAL 0)
-	endif()
+    if (MSVC OR MINGW OR APPLE)
+        set(SLIC3R_STATIC_INITIAL 1)
+    else()
+        set(SLIC3R_STATIC_INITIAL 0)
+    endif()
 endif()
 
-option(SLIC3R_STATIC 			"Compile Slic3r with static libraries (Boost, TBB, glew)" ${SLIC3R_STATIC_INITIAL})
-option(SLIC3R_GUI    			"Compile Slic3r with GUI components (OpenGL, wxWidgets)" 1)
-option(SLIC3R_PROFILE 			"Compile Slic3r with an invasive Shiny profiler" 0)
+#standard unix directories for installation
+IF(UNIX)
+    INCLUDE(GNUInstallDirs)
+ELSE(UNIX)
+    #so images get put in the right place
+    SET(CMAKE_INSTALL_DATADIR "share")
+ENDIF(UNIX)
+
+option(SLIC3R_STATIC            "Compile Slic3r with static libraries (Boost, TBB, glew)" ${SLIC3R_STATIC_INITIAL})
+option(SLIC3R_GUI               "Compile Slic3r with GUI components (OpenGL, wxWidgets)" 1)
+option(SLIC3R_PROFILE           "Compile Slic3r with an invasive Shiny profiler" 0)
 option(SLIC3R_MSVC_COMPILE_PARALLEL "Compile on Visual Studio in parallel" 1)
 option(SLIC3R_MSVC_PDB          "Generate PDB files on MSVC in Release mode" 1)
 option(SLIC3R_PERL_XS           "Compile XS Perl module and enable Perl unit and integration tests" 0)
@@ -35,7 +43,7 @@ option(SLIC3R_BUILD_TESTS       "Build unit tests" OFF)
 
 if (MSVC)
     if (SLIC3R_MSVC_COMPILE_PARALLEL)
-	   add_compile_options(/MP)
+       add_compile_options(/MP)
     endif ()
     # /bigobj (Increase Number of Sections in .Obj file)
     # error C3859: virtual memory range for PCH exceeded; please recompile with a command line option of '-Zm90' or greater
@@ -62,17 +70,17 @@ set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 # WIN10SDK_PATH is used to point CMake to the WIN10 SDK installation directory.
 # We pick it from environment if it is not defined in another way
 if(WIN32)
-	if(NOT DEFINED WIN10SDK_PATH)
-		if(DEFINED ENV{WIN10SDK_PATH})
-			set(WIN10SDK_PATH "$ENV{WIN10SDK_PATH}")
-		endif()
-	endif()
-	if(DEFINED WIN10SDK_PATH AND NOT EXISTS "${WIN10SDK_PATH}/include/winrt/windows.graphics.printing3d.h")
-		message("WIN10SDK_PATH is invalid: ${WIN10SDK_PATH}")
-		message("${WIN10SDK_PATH}/include/winrt/windows.graphics.printing3d.h was not found")
-		message("STL fixing by the Netfabb service will not be compiled")
-		unset(WIN10SDK_PATH)
-	endif()
+    if(NOT DEFINED WIN10SDK_PATH)
+        if(DEFINED ENV{WIN10SDK_PATH})
+            set(WIN10SDK_PATH "$ENV{WIN10SDK_PATH}")
+        endif()
+    endif()
+    if(DEFINED WIN10SDK_PATH AND NOT EXISTS "${WIN10SDK_PATH}/include/winrt/windows.graphics.printing3d.h")
+        message("WIN10SDK_PATH is invalid: ${WIN10SDK_PATH}")
+        message("${WIN10SDK_PATH}/include/winrt/windows.graphics.printing3d.h was not found")
+        message("STL fixing by the Netfabb service will not be compiled")
+        unset(WIN10SDK_PATH)
+    endif()
     if(WIN10SDK_PATH)
         message("Building with Win10 Netfabb STL fixing service support")
         add_definitions(-DHAS_WIN10SDK)
@@ -271,6 +279,10 @@ add_custom_target(pot
     COMMENT "Generate pot file from strings in the source tree"
 )
 
+IF (UNIX)
+    SET(RESOURCE_PATH ${CMAKE_INSTALL_FULL_DATADIR}/slic3r-prusa3d)
+ENDIF(UNIX)
+
 # libslic3r, Slic3r GUI and the slic3r executable.
 add_subdirectory(src)
 set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT slic3r_app_console)
@@ -290,5 +302,4 @@ if(SLIC3R_BUILD_TESTS)
     add_subdirectory(tests)
 endif()
 
-file(GLOB MyVar var/*.png)
-install(FILES ${MyVar} DESTINATION share/slic3r-prusa3d)
+install(DIRECTORY resources DESTINATION ${CMAKE_INSTALL_DATADIR}/slic3r-prusa3d)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 31c801379..cd71f8e83 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -62,6 +62,9 @@ if (SLIC3R_GUI)
     include(${wxWidgets_USE_FILE})
 endif()
 
+CONFIGURE_FILE(slic3r_generated_config.h.in slic3r_generated_config.h)
+include_directories(${CMAKE_CURRENT_BINARY_DIR})
+
 add_subdirectory(slic3r)
 
 # Create a slic3r executable
@@ -188,3 +191,6 @@ else ()
         VERBATIM
     )
 endif()
+
+#install slic3r into the filesystem
+INSTALL(TARGETS slic3r RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
diff --git a/src/slic3r.cpp b/src/slic3r.cpp
index 59b23c133..5ae194720 100644
--- a/src/slic3r.cpp
+++ b/src/slic3r.cpp
@@ -34,6 +34,7 @@
 
 #include "slic3r/GUI/GUI.hpp"
 #include "slic3r/GUI/GUI_App.hpp"
+#include <slic3r_generated_config.h>
 
 using namespace Slic3r;
 
@@ -77,6 +78,8 @@ int main(int argc, char **argv)
     // The resources are packed to 'resources'
     // Path from Slic3r binary to resources:
     boost::filesystem::path path_resources = path_to_binary.parent_path() / "resources";
+#elif defined RESOURCE_PATH
+    boost::filesystem::path path_resources = RESOURCE_PATH;
 #else
     // The application is packed in the .tar.bz archive (or in AppImage) as 'bin/slic3r',
     // The resources are packed to 'resources'
diff --git a/src/slic3r_generated_config.h.in b/src/slic3r_generated_config.h.in
new file mode 100644
index 000000000..b4d304cc4
--- /dev/null
+++ b/src/slic3r_generated_config.h.in
@@ -0,0 +1 @@
+#cmakedefine RESOURCE_PATH "@RESOURCE_PATH@"
